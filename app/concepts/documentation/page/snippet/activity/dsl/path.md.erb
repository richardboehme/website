
<%= h3 "Path()" %>

For branching out a separate path in an activity, use the `Path()` macro. It's a convenient, simple way to declare alternative routes, even if you could do everything it does manually.

<%= code "path", collapse: "meths" %>

By providing the options `:end_id` and `:end_task`, the newly created path will quit in a new end event.

<%= img "path-macro.png" %>

Using `Output` you can create an additional output in `decide_type` with the semantic `:credit_card`. This output is triggered when its task returns a `Trailblazer::Activity::Left` signal.

Note that the path ends in its very own end, signalizing a new end state, or outcome. The end's semantic is `:with_cc`.

<%= h4 "Join" %>

If you want the path to reconnect and join the activity at some point, use the `:connect_to` option.

<%= code "path-join", collapse: "meths" %>

There won't be another end event created.

<%= img "path-macro-join.png" %>

<%= h4 "Railway" %>

You can use `Path()` in any Trailblazer strategy, for example in `Railway`.

<%= code "path-railway", collapse: "meths" %>

In this example, we add a third output to `decide_type` to handle the credit card payment scenario (you could also "override" or re-configure the existing `:failure` or `:success` outputs).

<%= img "path-macro-railway.png" %>

Only when `decide_type` returns `MySignal`, the new path alternative is taken.

<%= code "path-decider", collapse: "meths" %>

`Output()` in combination with `Path()` allow very simple modelling for alternive routes.
