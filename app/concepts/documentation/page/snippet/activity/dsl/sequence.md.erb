<%= h3 "Sequence Options" %>

In addition to wiring options, there are a handful of other options known as _sequence options_. They configure where a task goes when inserted, and helps with introspection and tracing.

<%= h4 "id" %>

The DSL will provide default names for tasks.
You can name explicitely using the `:id` option.

<%= code "id", collapse: "id-methods" %>

The IDs are as follows.

<%= code "id-inspect" %>

This is advisable when planning to override a step via a module or inheritance or when reconnecting it. Naming also shows up in tracing and introspection. Defaults names are given to steps without the `:id` options, but these might be awkward sometimes.


<%= h4 "Delete" %>

When it's necessary to remove a task, you can use `:delete`.

<%= code "delete" %>

The `:delete` option can be helpful when using modules or inheritance to build concrete operations from base operations. In this example, a very poor one, the `validate` task gets removed, assuming the `Admin` won't need a validation.

<%= code "delete-inspect" %>

All steps are inherited, then the deletion is applied, as the introspection shows.

<%= h4 "Before" %>

To insert a new task before an existing one, for example in a subclass, use `:before`.

<%= code "before", collapse: "before-methods" %>

The circuit now yields a new `policy` step before the inherited tasks.

<%= code "before-inspect" %>

<%= h4 "After" %>

To insert after an existing task, you might have guessed it, use the `:after` option with the exact same semantics as `:before`.

<%= code "after", collapse: "after-methods" %>

The task is inserted after, as the introspection shows.

<%= code "after-inspect" %>

<%= h4 "Replace" %>

Replacing an existing task is done using `:replace`.

<%= code "replace", collapse: "replace-methods" %>

Replacing, obviously, only replaces in the applied class, not in the superclass.

<%= code "replace-inspect" %>
